// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract QuiltroToken is ERC20, Ownable {
    uint256 public burningRate;  // Percentage of transaction burned
    uint256 public mintRate;     // Rate at which new tokens can be minted

    constructor() ERC20("Quiltro", "QLTR") {
        _mint(msg.sender, 21000000000 * 10 ** decimals());  // Initial supply for the project
        burningRate = 2;  // 2% of transactions burned
        mintRate = 0;  // Initially set to 0, can be adjusted
    }

    // Mint new tokens - only the owner can call this
    function mintTokens(address to, uint256 amount) external onlyOwner {
        _mint(to, amount);
    }

    // Set mint rate - only the owner can adjust
    function setMintRate(uint256 newRate) external onlyOwner {
        mintRate = newRate;
    }

    // Set burning rate - only the owner can adjust
    function setBurningRate(uint256 newRate) external onlyOwner {
        burningRate = newRate;
    }

    // Burn tokens from the caller's balance
    function burnTokens(uint256 amount) external {
        _burn(msg.sender, amount);
    }

    // Internal transfer with burn mechanism applied
    function _transfer(address sender, address recipient, uint256 amount) internal override {
        uint256 burnAmount = (amount * burningRate) / 100;
        uint256 sendAmount = amount - burnAmount;

        super._burn(sender, burnAmount);  // Burn part of the amount
        super._transfer(sender, recipient, sendAmount);  // Transfer the remaining tokens
    }
}

